[[{"l":"Commencer avec PYTHON et la Physique (au lycée)","p":["Bonjour à tous.","Le but de ces cours est de vous aider vous lancer dans le langage de programmation PYTHON, au niveau du lycée, et plus spécifiquement du point de vu de ce que l'on utilise en Physique-Chimie."]}],[{"l":"IDE - Environnement de Codage"},{"l":"IDE - Environnement de codage"},{"l":"Installation d'un IDE","p":["Un IDE (Integrated Development Environement) - EDI en français - est l'espace dans lequel on écrit et on compile notre code.","Il y a littéralement des centaines d'IDE pour coder en PYTHON, utilisable gratuitement. La majorité sont à télécharger et installer sur votre PC/Mac, et un certain nombre sont utilisable directement sur internet (dans le nuage) et donc nécessite aucune installation","Voici quelques suggestions d'IDE pour vous, téléchargeable pour votre ordinateur personnel:","Edupython: développé par l'éducation nationale pour l'utilisation par des lycéens. Ne marche que sur Windows","SPYDER: Un IDE robuste et utilisable par tout niveau d'expertise. Installable sous toutes plateformes windows/mac/linux. Bonne guide > d'installation ici.","Voici queqlues suggestion d'IDE utilisable sur le web:","Google Colab: Un notebook basée sur Jupyter. Gratuit à utiliser si vous avez un compte Google/Gmail/Gdrive. l'avantage de cette plateform est > le fait de pouvoir écrire comme dans un traitement de text ET inclure de bloc de code executable comme dans un IDE ET la possibilité de partage son document avec quelques d'autre.","Replit: Un IDE dans le cloud/nuage. Il suffit de créer son compte gratuit et vous pouvez coder dans beaucoup de langue différentes, dont PYTHON. Pas besoin > > d'installer quoique ce soit.","Une fois votre IDE installé vous pouvez commencer avec quelques opérations de base."]},{"l":"Interface d'un IDE","p":["De manière générale votre environnement de codage est divisé en deux partie :","Editeur: comme un traitement de texte, là où vous allez écrire votre programme/code (script).","Console: l'endroit où s'affichent les résultats de l'execution de votre programme (textes, chiffres ou graphiques), mais là où vous pouvez interagir avec le programme une fois executé.","Un IDE est essentiellement un traducteur. Vous ecrivez votre programme dans la langue choisie (PYTHON, Java, javascript, C++, Ruby, etc ...), et puis l'IDE traduit ce programme en langage machine (en code binaire composé des 1 et 0).","L'IDE fait cela grâce à un compilateur. Execution d'un programme s'appelle donc \"compiler le code\"."]},{"l":"Executer un programme","p":["Afin de compiler votre programme il y a un bouton dans l'interface de votre IDE (souvent en form d'un bouton \"play\" ▶️). Since il existe des raccourcis clavier : ctrl-F9. (dans le cas de google colab ou jupyter c'est ctrl-entrer)"]},{"l":"Dans la console","p":["IL y a la possibilité d'executer certains opérations ou fonctions directement dans la console. voilà à quoi ressemble la console:","Vous pouvez y écrire une commande comme print(pour écrire un texte), et tapper entrer et l'executer toute de suite :","La console est aussi un calculatrice, c'est à dire vous pouvez écrire le calcule que vous voulez effectuer directement dans la console, appuyer sur entrer et obtenir le résultat toute de suite:","Un des superpouvoir de PYTHON est la possibilité de créer ses propres fonctions. On verra ça bien plus tard, mais en effet vous pouvez définir vous même une fonction.","Une fois votre programme compilé, la fonction est utilisable dans la console. Imaginer que vous avec défini une fonction qui calcule la racien carré d'un nombre, que vous nommez racineCarre. Après avoir compilé le programme, vous pouvez utiliser directement dans la console, la fonction que vous avez créee, comme le suivant :","Afin de coder en PYTHON, il faut un environnemetn de codage : un IDE.","IDe est composé d'un éditeur pour écrire le code, et une console pour executer le code et voir ses résultats."]}],[{"l":"Règles de Syntaxe","p":["PYTHON comme toute langue a des règles de syntaxe et de grammaire à respecter, d'autant plus qu'une langue parlé que la moindre irrespect de ces règles de logique empêcherait l'execution de votre code !","Sans entrer trop en détail, il est important de noter que le langage PYTHON est très sensible à certaines règles de syntaxe notamment :"]},{"l":"Ordre des choses :","p":["PYTHON lit le code dans l'ordre du haut vers le bas. C'est à dire si vous mentionnez une variable avant de l'avoir défini/affectée PYTHON aura du mal à executer le code.","De la même manière, chaque nouvelle instruction peut remplacer une ancienne instruction en cas de conflit. Exemple : Vous définissez a = 10 au début du programme, et plus tard vous donnez l'instruction a = 15, pour le programme, désormais la variable a a une valeur de 15 et non 10."]},{"l":"Majuscule et minuscule","p":["... ne sont pas pareilles. Une variable nommée variable n'est pas la même que Variable et encore différent que VariAblE. Pour PYTHON il s'agit de trois objets différents."]},{"l":"\"Ponctuation\"","p":["... est très important : on ne peut pas remplacer des : ; , . ' ' de manière interchangeable. Au fur et à mesur vous allez apprendre le bon usage de cela, mais il faut vraiment le respecter scrupuleusement"]},{"l":"Indentation","p":["de même pour \" l'indentation\" qui est essentielle pour la bonne organisation et structuration de votre programme. Par exemple, considérons les deux exemples suivants :","Dans le 2eme cas il y aura une erreur, car, en raison de manque d'indentation, PYTHON ne reconnait pas que le message à \"printer\" appartient à la condition précédente. La questions d'indentation est particulièrement important dans les \"boucles\" ( if, for, while, etc). De manière générale, tout texte \"indenté\" qui suit une ligne apartient au même \"bloc\"."]},{"l":"'Types' de données","p":["Un mot bref sur les différents \"types\" de données dans PYTHON. Voici une liste très brève des \"types\" les plus pertinentes pour nous :","Types numériques :","int: les entiers, positifs ou négatifs","float: les \"flottants\", c'est à dire des nombres à virgules, c'est-à-dire décimal. Pour rappel, le décimal est, comme pour les anglophones, un . et non un ,","complex: les nombres complexes, avec j pour la partie imaginaire du nombre.","types 'séquence' :","str: une chaîne de caractères, c'est à dire du texte.","list: une liste, une collection ordonées d'objet.","type 'Booléen' bool: représentant des vrais ou faux. Exemple : true, false."]},{"l":"Commentaires # :","p":["pour faire un commentaire : Tout text qui suit le symbole # est considéré comme un commentaire et NON comme du code à compiler par PYTHON. Voici deux exemple :","ici le commentaire joue le rôles - presque - de séparateur de sections dans notre programme","ici on s'informe du but de cette ligne de code.","Vous devez utiliser les commentaires dans votre code, car cela peut vraiment aider à comprendre pourquoi vous avez inclut une ligne, après le fait."]}],[{"l":"Opérations de base","p":["Une fois installé PYTHON est capable d'un certain nombre d'opération mathématiques et logiques de bases."]},{"l":"Opérations arithmétiques","p":["-","*","**","/","//","%","+","2-3-1","2**3 8","2*3 6","2+3 5","5//2 2","5%2 1","6/3 2","addition","division","Exemple","multiplication","Operation","puissance/exposant","quotient (d'une div. euclidéenne","reste (d'une division euclidéenne","soustraction","Symbole","Voici une liste courte des opérations arithmétiques les plus pertinentes pour nous :"]},{"l":"Opérations d'affectation","p":["Même si PYTHON s'écrit preque comme une rédaction mathématique (une des raisons pour laquelle on aime bien PYTHON), il y a des différences entre des symboles identiques.","L'exemple parfait est le symbole =. Dans PYTHON = est une affectation(un assignement). Cela veut dire que quand vous écrivez a = 10, vous êtes en train d'assigner une valeur (10) a une variable (a).","Voici donc quelques opérations d'affectation (j'aurais déclaré d'amont que a = 10) :","Symbole","Opération","Exemple","+=","addition","a += 3 equivaut a = a + 3 donc 13","*=","multiplication","a *= 3 équivaut a = a * 3 donc 30","**=","exponentiation","a **= 3 équivaut a = a**3 donc 1000"]},{"l":"Fonctions","p":["Au coeur de PYTHON, et ce qui fait sa puissance calculatoire, sont les fonctions. Une fonction est un ensemble d'instructions, qui prendre des arguments en entrée et qui retourne un/des résultats.","Les opérations mathématiques pré-éxistantes dans le programme de base sont des fonctions (très simples), mais l'on peut définir d'autre fonctions nous-mêmes.","Les valeurs sur lesquelles une fonction fait son opération s'appelle ses argument. Voici un exemple : sin(theta): ici la fonction sin a qu'un seul argument: la variable theta.","Une fonction peut avoir un seul ou plusieurs arguments. Les fonctions trigononmétriques par exemples prennent qu'un seul argument. Mais la majorité des fonctions dans PYTHON prennet plusieurs arguments. Par exemple, la fonction plot qui permet de créer des graphiques/tracés, prend au moins deux argument : la variable en abcisse et la variable en ordonnnées plot(x,y) et retourne un graphique avec le tracé de y=f(x).","Comme vous allez voir plus tard, vous pouvez définir vos propres fonctions, pour faire n'importe quelle opération, mais il y a déjà des catalogues de fonctions prédéfinie par d'autres personnes pour l'utilisation de toute le monde: ce sont des bibliothéques."]},{"l":"Quelques fonctions de bases","p":["Vous allez voirs des fonctions et des opérations spécifiques à la physique et maths dans les parties suivantes, mais il y a des fonctions de base que tout le monde doit connaître. Voici en une petite liste :","print(): cette fonction donne l'instruction d'écrire et retourner un texte ou un résultats calculé. Exemple :","len(): permet de déterminer la longueur d'une séquence (de caractères, d'une liste, etc). Exemple :","type: rèvle le \"type\" d'une donnée. Exemple :","input(): demande à l'utilisateur de saisir une donnée, de n'importe quel type (nombre, caractère, etc). Exemple :"]}],[{"l":"Les Bibliothéques !","p":["Malgré la présences d'un nombre considérable d'opérations dans une installation basique de PYTHON, on a souvent besoin de pouvoir faire des choses qui ne sont pas possible sans définir nous-me$eme une fonction capable de le faire.","Par exemple, si l'on voulait calcular la racine carré d'une nombre, il n'existe pas une fonction prédéfinie dans PYTHON. Néanmoins nous pouvons définir une fonction pour calculer la racine carré d'un nombre. Mais si l'on fait ça pour toute opération plus complexe (trigonométrique, logarithmique, etc) le travail peut devenir très laborieux.","Heureusement les gens généreux ont déjà fait ce travail pour nous, et l'ont mis dans une bibliothéque. Une bibliothéque (ou module) est uen collection de fonction définie pour nous, pret à utiliser sans aucun effort de notre part.","Ces bibliothéques sont groupés souvent par le type de fonction qu'ils proposent. Par exemple, pour visualisation graphique des données, ou pour faire de l'algèbre linéaire, ou la logique symbolique, etc.","Nous sommes intéressé, en particulier, par trois bibliothéques :","Bibliothéque","L'usage","Math","Des opérations mathématiques plus avancées et complexes (e.g. trigonométrique, logarithmiques, etc)","Numpy","Algèbre linéaire, traitement des séries de données, Data analysis (analyse des données","Matplotlib","Faire des graphqiues, visualisation des données"]},{"l":"\"Importation\" d'une bibliothéque","p":["Si nous voulons utiliser une ou des fonctions dans une bibliothéque il faut le dire au tout début de notre programme en utilisant l'instruction import.","Il y a deux façons d'utiliser cette fonction :","on \"importe\" TOUTE la bibliothéques. Dans ce cas-là le code est :","Ici on donne l'instruction d'important toute la bibliothéque \"math\" ET on la renomme \"m\" (pour des raisons que vous allez voir) 2. on \"importe\" une fonction seulement, avec le code suivant :","Ici on donne l'instruction de chercher dans la bibliothéque \"math\" et d'importer seulement la fonction \"sin\" (sinus).","A noter :","importation d'une bibliothéque dans votre IDE nécessite une connexion internet, si cela n'a jamais été fait avant","importation d'une seule fonction est beaucoup plus rapide qu'uen bibliothéque entière, et donc si vous ne comptais utiliser pas plusieurs fonction, il vaut mieux d'importer seulement la fonction nécessaire.","Afin d'utiliser la fonction dans une bibliothéque dans votre programme il faut utiliser la notation suivante : bibliotheque.fonction(). Par exemple si l'on veut utiliser la fonction sin dans la bibliothéque math il faut :","Ici on a renommé math comme m et on dit au logiciel de chercher la fonction sin dans m et de l'appliquer à un angle de 30."]}],[{"l":"Bibliothéques math","p":["Cette bibliothéque standard de PYTHON permet d'élargir le nombre d'opération mathématiques possibles au-delà des opérations de base déjà présentes en PYTHON.","Voici ce que contient (globalement) math:","opérations mathématiques plus avancées : des fonction trigonométriques( sin(), cos(), tan(), asin(), acos(), atan(), radians(), etc), des fonctions logarithmiques et exponentielles( exp(x), log(x), log10(x), pow(x, y), sqrt(x), etc),","Des constantes importantes : pi, e, inf, etc","d'autres fonctions numériques: ceil(x), floor(x), etc","La particularité de la bibliothéques math est le fait qu'elle est conçu pour opérer sur des scalaires, c'est à dire un seul nombre à chaque fois, et non une série de nombre."]}],[{"l":"Bibliothéque numpy","p":["numpy est une des bibliothéques les plus utiles pour nous en physique (mais aussi dans tout autre domaines y compris la Data Science l'apprentissage machine )","Il s'agit d'une bibliothéque de fonctions spécialisées pour des opérations mathématiques de toutes sorte sur des séries de données, c'est à dire sur des matrices ou des tables de chiffres. ( numpy est conçu particulièrement pour des opérations d' algèbre linéaire.). numpy nous permet de manipuler des vecteurs et des matrices, qui sont d'une utilité particulièrement centrale pour nous, et omniprésents dans tout domaine de la physique (et de la chimie).","C'est une bibliothéque particulièrement adaptée à ce que l'on fait en physique : l'étude des résultats expérimentaux et la modélisation. En déhors du monde de la physique, la plupart de ce que l'on appelle Data Science(comme par exemple l'entrainement des IA) est fait avec numpy."]},{"l":"Quelques fonctions importantes","p":["Sans entrer trop en détail voici une (très) petites liste des fonctions que l'on utilisera de temps, et certaines plutôt souvent","np.array(): la commande pour créer un tableau/série de valeurs.","np.arange(): Pour créer un tableau avec des valeurs régulièrement espacées. exemple :","np.linspace(): pour créer un tableau avec des valeurs uniformément repartie dans intervalle donné. exemple :","np.sqrt(): pour calculer la racine carré des différentes valeurs dans un tableau","np.sin(), np.cos(), np.tan(), np.asin(), np.acos(), np.atan(), np.log(): des fonctions trigonométriques et logarithmique de bases.","np.dot(): pour calcul le produit scalaire de deux vecteurs (vous verrez ça en classe de première). Exemple :","np.polyfit(): une fonction puissant pour modélisation polynomiale des séries de valeurs. Nous sommes particulièrement intéressés par cette fonction, en physique où notre tache principale est la construction des modèles à partir des résultats et des observations expérimentaux.","Dans les parties suivantes nous allons plonger un plus grand détail dans l'utilisation des plus importantes de ses fonctions, avec des exemples divers."]},{"l":"Calculs mathématiques sur des séries de nombres","p":["Il y a bien sur beaucoup d'autre fonction dans numpy mais pour nous (en physique au lycée) celles-là suffiront."]}],[{"l":"Les Arrays"},{"l":"Qu'est-ce qu'un array","p":["L'objet principal que l'on utilise dans numpy est un array: un tableau multidimensionnel de valeurs. Un array unidimensionnell est l'équivalent d'une colonne dans un tableur comme EXCEL(mathémaiquement l'équivalent d'un vecteur).","Ayant déjà importé la bibliothéque numpy et l'a renommée np, nous allons créer deux arrays A et B de manière suivante :","Une fois ce code a été compilé on peut les appeler dans la console :","maintenant je peux faire des opérations mathématiques de toute sorte sur toutes les valeurs dans ces tableaux.","Voici quelques exemples :","Notez bien comment nous avons pu manipuler les valeurs dans les arrays :","une opération de base comme la multiplication applique l'opération à tous les éléments de l'array","de même pour les opérations mathématique entre deux arrays (au contraire des lists)"]},{"l":"Différents types de arrays","p":["Mais ... les arrays sont bien plus que juste une \"liste de valeur\". Ce sont des objets mathématiques, que l'on appelle des tableaux ou plus mathématiquement matrices. On ne se sert pas beaucoup (ou du tout) des matrices au lycée, mais ils sont partout dans le supérieure (surtout pour nous en physique). On peut visualiser une matrice comme une grille de valeurs : une matrice m\\times n est composée de n colonnes et de m lignes de valeurs :","A = \\begin{bmatrix} 4 & 3\\\\\\ 3 & 2\\end{bmatrix} \\quad B = \\begin{bmatrix} 4 & 3 & 0 & -5\\end{bmatrix}\\quad C = \\begin{bmatrix} 4 \\\\\\ 3 \\\\\\ -5\\end{bmatrix} \\quad D = \\begin{bmatrix} 4 & 3 \\\\ 0 & -5\\\\7 & 23\\end{bmatrix}","A, B, C et D sont quatre matrices différentes. Leurs dimensions sont $A\\to 2\\times 2 \\quad ; \\quad B\\to 1\\times 4 \\quad ; \\quad C\\to 3\\times 1 \\quad ; \\quad D\\to 3\\times 2$.","Nous n'allons pas entrer en détail sur le sense mathématiques et physique de ces matrices encore, car le niveau est bien au-delà de ce que nous faisons au lycée, par en tant qu'exemple vous pouvez voir que matrice C peut représent un vecteur: les trois chiffres représentent les coordonnées du vecteur \\vec{v} = (4, 3, -5). Par conséquent toute opérations effectuée sur cette matrice, représentent des opérations/manipulations faites au vecteur \\vec{v}.","Comment peut on donc créer des arrays? On va apprendre trois méthodes simples."]}],[{"l":"Fonction array","p":["La méthode la plus simple et la plus directe (mais pas forcément la plus utile) est de simple définir l'array et ses constituants, comme dans l'exemple suivant :","Il y a d'autres méthodes de créer une matrice avec la fonction array, mais pour le moment ce que l'on a vu suffira.","Dans les cas précédents on a pu utiliser la fonction array car nous avions déjà les valeurs que l'on voulait mettre dans notre matrice. Cela peut être très utile par exemple dans le cas des mesures expérimentales que nous avons relevées lors d'une expérience (des distances parcourues par un objet, des valeur de pH mesurées avec un pH-mètre, etc).","En revanche, parfois nous voulons juste une séries de valeurs à un intervalle régulier. Pour cela nous avons deux fonctions très pratiques et simples : arange et linspace"]}],[{"l":"Fonction arange","p":["La fonction arange permet la création d'un array en précisant la valeur minimale, la valeur minimal et le pas entre les valeurs, c'est à dire l'intervalle entre valeurs successives.","Allons directement à un exemple pour mieux comprendre :","C'est aussi simple que ça. Voilà un autre exemple :","Notez qu'avec la fonction arange la limite maximale n'est pas incluse dans l'array formé."]}],[{"l":"Fonction linspace","p":["Le fonctionnement de linspace est quasi-identique à celui de arange avec une différence principale : avec linspace on précise le nombre de valeurs dans la série entre les valeurs max/min, tandis qu'avec arange on précise le pas.","Voici un exemple :","et voici un autre exemple :"]}],[{"l":"Fonction linalg.solve","p":["4x + 3y = 10 \\\\ 3x + 2y = 6","C'est donc un outil puissant pour nous en physique car nos problèmes se réduisent très souvent en un système d'équation à résoudre (et ce même dans des domains de physique bien plus avance tel que la mécanique quantique).","Celle-là est un de nos grands amis, car linalg.solve nous permet de résoudres des équations algébrique, mais surtout des systèmes d'équations.","De manière général linalg.solve nous permet de résoudre des équation du type : A\\cdot X = b où on connait A et b.","Définir les arrays avec les valeurs des matrices","Ici A \\to 4, X \\to x et b \\to 8. C'est l'exemple le plus simple et basique que l'on peut donner. Utile, mais pas très intéressant. Voici comment trouver la solution avec linalg.solve:","Imaginons donc un système de trois équations avec trois variables x, y, z qui représentent trois plans :","La vraie puissance de cette fonction est dans ça capacité à résoudre des systèmes d'équation, telle que vous l'avez appris en fin du collège.","linalg.solve est conçu pour résoudre des systèmes d'équations et donc va toujours supposer que le A est une matrice au moins en 2 dimensions, d'où A = np.array([[4]]) et non A = np.array([4]), tandis que b = np.array([8]).","linalg.solve prend comme argument des array et donc il faut toujours définir ses variable et données par la fonction array","On peut réécrire ce système sous forme A\\cdot X = b:","où A = \\begin{bmatrix}4 & 3\\\\\\ 3 & 2\\end{bmatrix} et b= \\begin{bmatrix} 10 \\\\\\ 6 \\end{bmatrix}. Le matrice \\begin{bmatrix} x \\\\\\ y \\end{bmatrix} correspond donc à la solution que linalg.solve doit nous trouver.","Pour rappel, la solution serait un point dans l'espace tridimensionnel ayant des coordonnées (x, y, z). Comme avant nous allons suivre les étapes suivantes :","Prenons un exemple simple: deux équations linéaires avec deux variables inconcue x et y:","Quel intérêt pour nous en physique de pouvoir faire ça? Eh bah figurez vous que ça nous arrive très souvent à avoir beson de résoudre un système d'équatin pour trouver la solution à un problème. Un exemple très simple est trouver l'intersection entre deux droites, ou encore le point d'intersection de trois plans.","transformer le système en une équation du type A\\cdot X = b ou A serait une matrice 3\\times 3, et b est une matrice 3\\times 1.","Utiliser np.linalg.solve pour trouver la solution.","Voici un exemple très basique : 4\\cdot x = 8","Vous allez pouvoir vraiment voir la puissance de cette fonction dans la partie exercices avec des applications à toute sorte de problèmes physique et chimiques.","x + y + z = 2 \\\\ x + 2y - 3z = 0 \\\\ 5x - 3y + z = -1"]}],[{"l":"Bibliothéque matplotlib.pyplot","p":["Il s'agit d'une bibliothéque essentielle pour nous en physique car c'est notre outil principal de visualization de nos résultats expérimentaux.","matplotlib est une bibliothéques vaste avec beaucoup de possibilité de visualisation des données, allant des nuages de points (notre utilisation principale au lycée), jusqu'aux camembers, histogrammes, bar-graphes ..."]},{"l":"Création d'un graphique","p":["La commande la plus basique de création d'un graphique/tracé est plot(verbe anglais pour \"tracer un graphique\").","La fonction plot prend au moins deux arguments : abscisse, et ordonnée. Mais, elle peut prendre plus aussi : ce sont des paramètres optionnels qui permettent d'affiner l'apparence du graphique. On les verra dans une sous-partie qui suit. Il est important de noter que l'argument d'ordonnée peut etre une série de valeur (comme un array), ou une fonction.","Si après important nous avons nommée la bibliothéque plt la commande devient plt.plot(abscisse,ordonnée)","Il nous faut au moins une deuxième fonction dans matplotlib afin d'afficher notre graphique : show(), qui indique à PYTHON d'afficher le graphique que l'on vient de créer.","Exemple :","ce qui donne : fig","Bon, c'est en effet un graphique, minimaliste ... trop minimaliste pour nous en physique (on veut un nuage de points, car relier les mesures comme ça n'a aucun sens physique pour nous!). Mais on a le minimum pour créer un graphique maintenant."]},{"l":"'Enjolification/formatage' de votre graphique","p":["Il y a quelques fonctions supplémenatires à apprendre afin de pouvoir créer un graphique plus digne de ce nom ! dans un premier temps nous allons apprendre à ajouter quelques paramètres optionnels à la fonction plot et puis ajouter d'autres fonctions pour complèter le graphique.","Paramètres optionnels de formatage de la fonction plot:","couleur: 'b'-> bleu, 'r'-> rouge, 'g'-> vert, 'k'-> noir","marquer(style des points des données) : 'x'-> croix, '+' des + , 'o'-> des ronds , 's'-> des carrés , 'D'-> des losanges, '^'-> des triangles","style des lignes/coursbes: '-'-> ligne continue, '--'-> ligne pointillée, '-.'-> ligne mixte, ':'-> ligne en pointillées","label: afin de donner une étiquette à une courbe qui apparaîtra dans la légende. Ex : label=angles en radians","Quelques fonctions supplémentaires pour le formattage du graphique :","title(): permet la création du titre du graphique","xlabel() et ylabel(): permettent de donne le titre de chaque axe","legend(): ajoute une légendre au graphique, ce qui serait nécessaire dans les cas où nous visualisons plusieurs courbes à la fois.","grid(): permet d'afficher un quadrillage sur le graphique.","xlim() et ylim(): permet de vous définir les valeurs max/min de vos axes"]},{"l":"Plusieurs courbes sur un même graphique","p":["Nous avons besoin, souvent, de mettres deux ou plusieurs courbes/séries de valeur sur un même graphique. C'est très facile de faire cela en PYTHON. Il suffit de créer chaque courbe avec une fonctioni plot séparée avant de donner l'instruction d'affiche avec show(). Voici un exemple :","Ce qui donne le graphique suivant : fig2","Vous voyez maintenant l'intérêt du formattage et l'étiquettage de vos graphiques !","Un exemple plus complet donc :","Ce qui donne : fig3","Jolie n'est-ce pas?"]}],[{"l":"Fonctions : un superpouvoir","p":["Tout ce que l'on a pu faire jsuqu'alors a été grâce aux différentes fonctions que vous avez vues, dans des différentes bibliothéques. Ce qu'il faut savoir c'est que toutes ces fonctions ont été définies par quelqu'un et puis rendues disponibles et réutilisables. Par exemple pour calculer une racine carrée comme on a vu avec sqrt(), il y a un algorithm qui a été défini et puis mis dans une bibliothéque, afin de ne pas forcer chaque individu à rédéfinir cet algorthme calculatoire pour pour chaque calcul de racine carrée.","En effet, une bibliothéque est un ensemble de ces fonctions, créees et définies par des individus partout (presque toujours gratuitements) afin de simplifier la tâche de codage ! ... Et vous pouvez faire la même chose !","Une fonction est un bloc de code qui peut être réutilisé plusieurs fois dans un programme, afin de rendre le programme plus organise, claire et économique.","une fois définie on peut penser d'une fonction comme une machine qui prend des arguments ou des paramètres et renvoie un résultats en modifiant ces arguments."]},{"l":"Déclaration d'une fonction","p":["Déclarer une fonction est comment on la définit, c'est-à-dire définir l'opération que l'on voudrait effectuer sur les paramètres d'entrée.","Définir une fonction Ec qui calcule l'énergie cinétique pour une masse et une vitesse donnée.","Définir une fonction mpsKPH qui permet de convertir une vitesse en \\frac{m}{s} en \\frac{km}{h}.","exemple :","Exercice d'application","Faisons quelques exercices d'application, facile et qui pourraient nous aider dans le future :","l'indentation des lignes qui suivent est impérative aussi, et à respecter.","la ligne où on nomme la fonction avec def il est impératif de finir par :","On a une autre manière de faire la même chose que dans l'exemple précédent :","On utilise def pour commence, suivi du nom de la fonction et les paramètres à inclure; puis nous définissons l'ensemble des opération à effectuer sur ces paramètres et pour finir, on donne ce que la fonction doit retourner, c'est à dire le résultat final. Voilà la forme générale schématique d'une déclaration de fonction","Regardons un exemple simple : on va définir une fonction carre qui calcule le carré d'un nombre a.","Un autre exemple plus applicable pour nous en physique : on peut définir une fonction qui calcule la vitesse à partir d'une distance et d'une durée :","une fois définie nous pouvons utiliser cette fonction avec différentes valeurs de a:","Une fonction n'est pas que pour les calculs mathématiques, mais aussi d'autres opérations. Voici un exemple :","Voyons quelques exemples de fonction prenant deux arguments."]}],[{"l":"Qu'est-ce qu'une boucle?","p":["Un autre superpouvoir de PYTHON est dans ce qu'on appelle les boucles.","Un boucle est une série d'instruction que le programme répète avant de procéder à la suite du programme.","Les boucles permettent d'utiliser au maximum une des puissances principales : sa capacité à répéter une tache avec précision uns très grande nombre de fois, très vite.","Pourquoi aurait-on envie de traiter en répétition quelques chose? Un exemple peut être pour appliquer les instructions sur une série de valeur. Si par exemple nous voulons calculer la trajectoire d'un objet en chute, il faut calculer les différents point d'ordonnée correspondants aux différentes abscisses. On verra des exemples ci-après."]},{"l":"Deux façons de faire une boucle","p":["Nous allons voir deux façon de faire des boucles, selon deux critères différents :","boucles for: une boucle qui se répète un nombre déterminé de fois","boucles while: un boucle qui se répète tant une certaines conditions est satisfaite."]}],[{"l":"Boucle FOR","p":["On utiliser la boucle for quand nous savons combien de fois nous voulons faire un calcul, ou executer une séries d'instruction.","Voilà la structure générale d'une boucle for:","important de noter le : à la fin de la première ligne qui est obligatoire","l'indentation est à respecter, car il n'y a rien pour signaler la fin de la boucle sauf le retour à la ligne à la fin de la boucle","le for et le in sont obligatoire dans la déclaration des conditions de la boucle","Regardons quelques exemples simples pour mieux comprendre.","On veut créer un compteur, et lui dire de compter de zero à 5.","la fonction range(n) fait un décompte de 0\\to n-1."]}],[{"l":"Modélisation graphique avec Python","p":["On voudrait faire la même modélisation avec PYTHON (dans Edupython à l'école) en vous servant de la bibliothèque matplotlib.pyplot pour l’affichage du nuage des points.","Modéliser nos résultats, c'est à dire trouver la \"courbe de tendance\" adaptée à nos données est différente avec Python.","Nous avons plusieurs possibilités mais nous nous focalisons sur deux options : la fonction polyfit(abscisse,ordonnee,ordre) dans la bibliothèque numpy, ou de la fonction linregress dans la bibliothèque scipy.stats."]},{"l":"Modélisation avec polyfit","p":["La fonction polyfit(abscisse,ordonnee,ordre) nous propose la courbe décrite par une fonction polynomial(dont le degrée nous choisissons) la mieux adaptée à nos données. (Pour rappel une fonction polynomiale s'écrit comme une somme des puissance d'une variable x: f(x) = a\\cdot x^n + b\\cdot x^{n-1} + \\cdots + p\\cdot x + q","Le degrée n de la fonction correspond à la puissance de x la plus élevée.","Vous en conniassez déjà quelques exemple :","f(x) = a la fonction constante est un polynôme de degrée 0","f(x) = a\\cdot x + b: la fonction linéaire est une polynôme de premier degrée ( n=1)","f(x) = a\\cdot x^2 + b\\cdot x + c: la fonction quadratique (qui décrit une parabole) est un polynôme de degree 2.","Commençons comme toujours avec l'importation des bibliothéques numpy pour le traitement des séries de nombres, et matplotlib pour la visualisation graphique.","Voici donc comment utiliser la fonction polyfit:","Il est important de définir les données avec la fonction np.array, pour que Python les reconnaisse comme une séries de valeur numériques ( float) et non juste une liste d'object.","Une fois numpy importé comme np, on peut utiliser avece np.polyfit(x,y,n). polyfit prend 3 arguments : x= la grandeur en abscisse, la variable indépendante de la fonction; y= la grandeur en ordonnée; n= le degrée de la fonction polynomiale qui modéliser les résultats.","En fonction du type de fonction polynomiale utilisée pour la modélisation, la polyfit génère un certain nombre de paramètres. Par exemple, pour une modélisation par une fonction linéaire du type y = a\\cdot x + b, polyfit calcule et génère les paramètres a et b pour la droite la mieux adaptée aux valeurs mesurées.","Ces paramètres sont stockés dans la mémoire de l'environnement de codage et afin d’y accéder il faut les 'écrire' dans des variables : a, b = polyfit(x,y,1)(où x et y sont changent en fonction des noms que nous avons donnés à nos grandeurs).","Grâce à cela, les paramètres caractérisant la droite de notre modèle sont désormais stockés dans les variables a et b.","Afin d’afficher la droite de modélisation, il faut utiliser la fonction plot dans matplotlib: plt.plot(x,f(x), ...) où x= est la variable indépendante, f(x)= ce qu’on veut faire apparaître en ordonnée, c’est à dire la fonction f(x); et les paramètres de visualisation comme la couleur ou le style de ligne pour la courbe."]},{"l":"Exemple d'un corrigé"}],[{"l":"NumPy pour la Physique : Feuille d’Activités"},{"l":"Fonction numpy : array"},{"l":"Exercice 1 : Créez un tableau NumPy à partir de la liste `` et affichez-le."},{"l":"Solution","p":["Sortie :"]},{"l":"Exercice 2 : Créez un tableau NumPy 2D de forme (2, 3) contenant les nombres de 1 à 6, puis affichez-le."},{"l":"Solution","p":["Sortie :"]},{"l":"Exercice 3 : Créez un tableau NumPy à partir de la liste de nombres flottants [1.1, 2.2, 3.3] et affichez-le."},{"l":"Solution","p":["Sortie :"]},{"l":"Fonction numpy : arange"},{"l":"Exercice 1 : Utilisez np.arange pour créer un tableau contenant les entiers de 0 à 9 inclus, puis affichez-le."},{"l":"Solution","p":["Sortie :"]},{"l":"Exercice 2 : Utilisez np.arange pour créer un tableau contenant les entiers de 5 à 15 inclus, puis affichez-le."},{"l":"Solution","p":["Sortie :"]},{"l":"Exercice 3 : Utilisez np.arange pour créer un tableau contenant les nombres de 0 à 20 inclus, avec un pas de 2, puis affichez-le."},{"l":"Solution","p":["Sortie :"]},{"l":"Fonction numpy : linspace"},{"l":"Exercice 1 : Utilisez np.linspace pour créer un tableau contenant 5 valeurs également espacées entre 0 et 1, puis affichez-le."},{"l":"Solution","p":["Sortie :"]},{"l":"Exercice 2 : Utilisez np.linspace pour créer un tableau contenant 10 valeurs également espacées entre 1 et 10, puis affichez-le."},{"l":"Solution","p":["Sortie :"]},{"l":"Exercice 3 : Utilisez np.linspace pour créer un tableau contenant 3 valeurs également espacées entre -1 et 1, puis affichez-le."},{"l":"Solution","p":["Sortie :"]},{"l":"Fonction numpy : dot"},{"l":"Exercice 1 : Calculez le produit scalaire des vecteurs et à l’aide de np.dot et affichez le résultat."},{"l":"Solution","p":["Sortie :"]},{"l":"Exercice 2 : Calculez le produit matriciel de deux matrices 2x2 [,] et [,] avec np.dot et affichez le résultat."},{"l":"Solution","p":["Sortie :"]},{"l":"Exercice 3 : Calculez le produit scalaire de deux vecteurs orthogonaux et avec np.dot et affichez le résultat."},{"l":"Solution","p":["Sortie :"]},{"l":"Fonction numpy : sqrt"},{"l":"Exercice 1 : Calculez la racine carrée du nombre 16 avec np.sqrt et affichez le résultat."},{"l":"Solution","p":["Sortie :"]},{"l":"Exercice 2 : Calculez la racine carrée de chaque élément du tableau `` avec np.sqrt et affichez le résultat."},{"l":"Solution","p":["Sortie :"]},{"l":"Exercice 3 : Calculez la racine carrée du nombre flottant 2.25 avec np.sqrt et affichez le résultat."},{"l":"Solution","p":["Sortie :"]},{"l":"Fonction numpy : sin"},{"l":"Exercice 1 : Calculez le sinus de 0 avec np.sin et affichez le résultat."},{"l":"Solution","p":["Sortie :"]},{"l":"Exercice 2 : Calculez le sinus des angles [0, π/2, π] (en radians) avec np.sin et affichez les résultats."},{"l":"Solution","p":["Sortie :"]},{"l":"Exercice 3 : Calculez le sinus de π/4 avec np.sin et affichez le résultat."},{"l":"Solution","p":["Sortie :"]},{"l":"Fonction numpy : cos"},{"l":"Exercice 1 : Calculez le cosinus de 0 avec np.cos et affichez le résultat."},{"l":"Solution","p":["Sortie :"]},{"l":"Exercice 2 : Calculez le cosinus des angles [0, π/2, π] (en radians) avec np.cos et affichez les résultats."},{"l":"Solution","p":["Sortie :"]},{"l":"Exercice 3 : Calculez le cosinus de π/4 avec np.cos et affichez le résultat."},{"l":"Solution","p":["Sortie :"]},{"l":"Fonction numpy : sum"},{"l":"Exercice 1 : Calculez la somme des éléments du tableau `` avec np.sum et affichez le résultat."},{"l":"Solution","p":["Sortie :"]},{"l":"Exercice 2 : Calculez la somme de tous les éléments du tableau 2D [,] avec np.sum et affichez le résultat."},{"l":"Solution","p":["Sortie :"]},{"l":"Exercice 3 : Calculez la somme des éléments du tableau 2D [,] selon les colonnes (axe 0) avec np.sum et affichez le résultat."},{"l":"Solution","p":["Sortie :"]},{"l":"Fonction numpy : mean"},{"l":"Exercice 1 : Calculez la moyenne des éléments du tableau `` avec np.mean et affichez le résultat."},{"l":"Solution","p":["Sortie :"]},{"l":"Exercice 2 : Calculez la moyenne de tous les éléments du tableau 2D [,] avec np.mean et affichez le résultat."},{"l":"Solution","p":["Sortie :"]},{"l":"Exercice 3 : Calculez la moyenne des éléments du tableau 2D [,] selon les lignes (axe 1) avec np.mean et affichez le résultat."},{"l":"Solution","p":["Sortie :"]},{"l":"Fonction numpy : average"},{"l":"Exercice 1 : Calculez la moyenne pondérée du tableau `` avec les poids [0.1, 0.2, 0.3, 0.4] en utilisant np.average et affichez le résultat."},{"i":"fonction-numpy--average-1","l":"Fonction numpy : average"},{"i":"exercice-1--calculez-la-moyenne-pondérée-du-tableau--avec-les-poids-01-02-03-04-en-utilisant-npaverage-et-affichez-le-résultat-1","l":"Exercice 1 : Calculez la moyenne pondérée du tableau `` avec les poids [0.1, 0.2, 0.3, 0.4] en utilisant np.average et affichez le résultat."}],[{"l":"NumPy pour la Physique : Feuille d’Activités"},{"l":"1. Créer un Tableau 1D","p":["Crée un tableau NumPy avec les vitesses suivantes (en m/s) : 10, 20, 30, 40, 50."]},{"l":"2. Calculer l’Énergie Cinétique","p":["Énoncé : Pour une masse de 2 kg, calcule l’énergie cinétique pour chaque vitesse du tableau précédent.(Énergie cinétique = 0.5 × m × v²)"]},{"l":"Afficher la solution","p":["Sortie :"]},{"l":"3. Créer un Tableau de Temps","p":["Énoncé : Crée un tableau NumPy représentant le temps de 0 à 5 secondes par pas de 0,5 seconde."]},{"l":"Afficher la solution","p":["Sortie :"]},{"l":"4. Calculer un Déplacement","p":["Énoncé : Pour une vitesse constante de 3 m/s, calcule le déplacement à chaque instant."]},{"l":"Afficher la solution","p":["Sortie :"]},{"l":"5. Addition de Vecteurs","p":["Énoncé : Étant donnés deux vecteurs force : F1 = N, F2 = N, calcule le vecteur résultant."]},{"l":"Afficher la solution","p":["Sortie :"]},{"l":"6. Module d’un Vecteur","p":["Énoncé : Calcule le module du vecteur résultant précédent."]},{"l":"Afficher la solution","p":["Sortie :"]},{"l":"7. Produit Scalaire","p":["Énoncé : Calcule le produit scalaire de F1 et F2."]},{"l":"Afficher la solution","p":["Sortie :"]},{"l":"8. Produit Vectoriel","p":["Énoncé : Calcule le produit vectoriel de F1 et F2."]},{"l":"Afficher la solution","p":["Sortie :"]},{"l":"9. Simuler une Chute Libre","p":["Énoncé : Avec une vitesse initiale de 0 m/s et g = 9,8 m/s², calcule la vitesse à chaque seconde pendant 5 s."]},{"l":"Afficher la solution","p":["Sortie :"]},{"l":"10. Sinus d’Angles","p":["Énoncé : Crée un tableau d’angles de 0° à 90° par pas de 15°, puis calcule leur sinus."]},{"l":"Afficher la solution","p":["Sortie :"]},{"l":"11. Mouvement Rectiligne Uniformément Accéléré","p":["Énoncé : Un mobile part du repos avec une accélération de 2 m/s². Calcule vitesse et position chaque seconde pendant 10 s."]},{"l":"Afficher la solution","p":["Sortie :"]},{"l":"12. Énergie Mécanique lors d'une Chute","p":["Énoncé : Une balle de 0,2 kg tombe de 20 m. Calcule Ep, Ec et Em à chaque mètre."]},{"l":"Afficher la solution","p":["Sortie :"]},{"l":"13. Période d'un Pendule Simple","p":["Énoncé : Pour des longueurs L = [0.2, 0.4, 0.6, 0.8, 1.0] m, calcule la période théorique T."]},{"l":"Afficher la solution","p":["Sortie :"]},{"l":"14. Résistance Équivalente en Parallèle","p":["Énoncé : Calcule la résistance équivalente de trois résistances (100, 220, 470 Ω) en parallèle."]},{"l":"Afficher la solution","p":["Sortie :"]},{"l":"15. Chute avec Frottements (Méthode d'Euler)","p":["Énoncé : Simule la vitesse d'un objet de 80 g tombant avec F_f = -0.1v pendant 5 s."]},{"l":"Afficher la solution","p":["Sortie :"]},{"l":"16. Ajustement Linéaire (Loi d'Ohm)","p":["Énoncé : Ajuste une droite aux données U = V et I = [0,0.12,0.23,0.31,0.41,0.51] A."]},{"l":"Afficher la solution","p":["Sortie :"]},{"l":"17. Vitesse Moyenne et Instantanée","p":["Énoncé : Calcule la vitesse moyenne et instantanée pour x = [0,1.5,3.2,5.1,7.1,9.4] m à t = 0-5 s."]},{"l":"Afficher la solution","p":["Sortie :"]},{"l":"18. Loi de Snell-Descartes","p":["Énoncé : Pour des angles d’incidence [0°,10°,20°,30°,40°,50°], calcule les angles de réfraction dans du verre (n=1.5)."]},{"l":"Afficher la solution","p":["Sortie :"]},{"l":"19. Décroissance Radioactive","p":["Énoncé : Simule la décroissance de 5000 noyaux avec une demi-vie de 3 jours pendant 15 jours."]},{"l":"Afficher la solution","p":["Sortie :"]},{"l":"20. Énergie Solaire Reçue","p":["Énoncé : Calcule l’énergie reçue par un panneau de 1,5 m² exposé à une irradiance horaire variable pendant 8h.","Félicitations ! Tu as terminé tous les exercices. \uD83C\uDF89"]},{"l":"Afficher la solution","p":["Sortie :"]}]]